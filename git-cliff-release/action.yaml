name: Prepare release metadata using git-cliff
description: Prepare release metadata based on conventional commits using git-cliff
inputs:
  release_type:
    description: Release type
    required: true
    type: choice
    default: auto
    options:
      - auto
      - prerelease
      - patch
      - minor
      - major
      - custom
  custom_version:
    description: The custom version to bump to (only for "custom" type), with or without a leading "v"
    required: false
    type: string
    default: ""
  cliff_config_path:
    description: Path to a custom git-cliff configuration file
    required: false
    type: string
    default: cliff.toml
  existing_changelog_path:
    description: Path to an existing changelog. If given, the new changelog contents will be prepended to it intelligently.
    required: false
    type: string
    default: ""
  token:
    description: Github token to be used by github CLI
    required: false
    type: string
    default: ${{ github.token }}
  no-github:
    description: If set to true, the action will not insert links to GitHub issues and PRs in the release notes and changelog.
    required: false
    type: boolean
    default: false
outputs:
  is_prerelease:
    description: For convenience - was the action triggered with release_type = "prerelease"?
    value: ${{ steps.version_number.outputs.is_prerelease }}
  version_number:
    description: Version number of the new release (no leading "v")
    value: ${{ steps.version_number.outputs.version_number }}
  tag_name:
    description: Tag name for the new release (with a leading "v")
    value: ${{ steps.version_number.outputs.tag_name }}
  release_notes:
    description: Release notes for the new release
    value: ${{ steps.release_notes.outputs.release_notes }}
  changelog:
    description: The complete changelog
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ github.workspace }}/__release_metadata_repo
    - name: Install git-cliff
      shell: bash
      run: pip install git-cliff
    - name: Locally remove pre-release tags
      shell: bash
      working-directory: ${{ github.workspace }}/__release_metadata_repo
      run: |
        if git tag | grep -e '[ab][0-9]' -e '-beta\.' -e '-alpha\.' > /dev/null 2> /dev/null; then
          git tag | grep -e '[ab][0-9]' -e '-beta\.' -e '-alpha\.' | xargs -r git tag --delete
        fi
    - name: Determine version number
      id: version_number
      shell: bash
      env:
        GIT_CLIFF_CONFIG: ${{ inputs.cliff_config_path }}
        GIT_CLIFF_REPOSITORY: ${{ github.workspace }}/__release_metadata_repo
        GIT_CLIFF_WORKDIR: ${{ github.action_path }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        set -x
        if [[ '${{ inputs.release_type }}' = custom ]]; then
          version_number=$(echo ${{ inputs.custom_version }} | sed s/^v//)
        elif [[ '${{ inputs.release_type }}' = auto || '${{ inputs.release_type }}' = prerelease ]]; then
          version_number=$(git-cliff --bumped-version | sed s/^v//)
        else
          version_number=$(git-cliff --bump '${{ inputs.release_type }}' --context | jq -r '.[0].version' | sed s/^v//)
        fi
        echo version_number=$version_number | tee -a $GITHUB_OUTPUT
        echo tag_name=v$version_number | tee -a $GITHUB_OUTPUT
        echo is_prerelease=${{ inputs.release_type == 'prerelease' }} | tee -a $GITHUB_OUTPUT
    - name: Generate release notes
      id: release_notes
      shell: bash
      env:
        GIT_CLIFF_CONFIG: ${{ inputs.cliff_config_path }}
        GIT_CLIFF_REPOSITORY: ${{ github.workspace }}/__release_metadata_repo
        GIT_CLIFF_WORKDIR: ${{ github.action_path }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
      working-directory: ${{ github.action_path }}
      run: |
        set -x
        enhance_context_args=()

        if (( ${{ inputs.no-github }} )); then
          enhance_context_args+=(--no-github)
        fi

        echo 'release_notes<<EOF' >> $GITHUB_OUTPUT
        git-cliff --tag "${{ steps.version_number.outputs.tag_name }}" --unreleased --context | 
          python enhance_context.py --repo $GITHUB_REPO --release-notes "${enhance_context_args[@]}" |
          git-cliff --from-context - --strip all |
          tee -a $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
    - name: Generate changelog
      id: changelog
      shell: bash
      env:
        GIT_CLIFF_CONFIG: ${{ inputs.cliff_config_path }}
        GIT_CLIFF_REPOSITORY: ${{ github.workspace }}/__release_metadata_repo
        GIT_CLIFF_WORKDIR: ${{ github.action_path }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
      working-directory: ${{ github.action_path }}
      run: |
        set -x
        dump_context_args=()
        enhance_context_args=()
        print_changelog_args=()

        out_file=$GIT_CLIFF_WORKDIR/new_changelog.md

        if [[ -n "${{ inputs.existing_changelog_path }}" ]]; then
          out_file=$GIT_CLIFF_WORKDIR/existing_changelog.md
          cp "$GIT_CLIFF_REPOSITORY/${{ inputs.existing_changelog_path }}" $out_file
          sed '/<!-- git-cliff-unreleased-start -->/,/<!-- git-cliff-unreleased-end -->/d' -i $out_file

          dump_context_args+=(--unreleased)
          print_changelog_args+=(--prepend "$out_file" --unreleased)
        else
          print_changelog_args+=(--output "$out_file")
        fi

        if (( ${{ inputs.no-github }} )); then
          enhance_context_args+=(--no-github)
        fi

        if [[ ${{ inputs.release_type }} = prerelease ]]; then
          enhance_context_args+=(--unreleased-version "${{ steps.version_number.outputs.tag_name }}")
        else
          dump_context_args+=(--tag "${{ steps.version_number.outputs.tag_name }}")
        fi

        git-cliff --context "${dump_context_args[@]}" |
          python enhance_context.py --repo $GITHUB_REPO "${enhance_context_args[@]}" |
          git-cliff --from-context - "${print_changelog_args[@]}"

        sed -i '$a\' $out_file # Make sure there is a newline at the end of the output file

        echo 'changelog<<EOF' >> $GITHUB_OUTPUT
        cat $out_file >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
    - name: Clean up
      shell: bash
      env:
        GIT_CLIFF_REPOSITORY: ${{ github.workspace }}/__release_metadata_repo
      run: |
        rm -rf $GIT_CLIFF_REPOSITORY
