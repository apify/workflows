# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if not version %}<!-- git-cliff-unreleased-start -->
{% endif %}\
{% if version and extra.release_link %}\
    ## [{{ version | trim_start_matches(pat="v") }}]({{ extra.release_link }}) ({{ timestamp | date(format="%Y-%m-%d") }})
{% elif extra.unreleased_version %}\
    ## {{ extra.unreleased_version | trim_start_matches(pat="v") }} - **not yet released**
{% elif version %}
    ## {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}\
    ## Unreleased
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}:** {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {% if commit.extra.pr_link %}\
            {{ commit.message | escape | upper_first | replace(from=commit.extra.raw_pr_link, to=commit.extra.pr_link) }}\
            {% else %}\
            {{ commit.message | escape | upper_first }}\
            {% endif %}\
            {% if commit.extra.commit_link %} ([{{ commit.id | truncate(length = 7, end = "") }}]({{ commit.extra.commit_link }})){% endif %}\
            {% if commit.extra.username and extra.is_release_notes %}\
            {{" "}}by @{{ commit.extra.username }}\
            {% elif commit.extra.username %}\
            {{" "}}by [@{{ commit.extra.username }}](https://github.com/{{ commit.extra.username }})\
            {% if commit.extra.closed_issue_links %}\
            , closes {{ commit.extra.closed_issue_links | join(sep = ", ") }}\
            {% endif %}\
            {%- endif %}\
    {% endfor %}
{% endfor %}\n
{% if not version %}<!-- git-cliff-unreleased-end -->
{% endif %}\
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = []

[bump]
# With 0.x.y version, breaking commits should only increase the minor version and feature commits should only increase the patch version
breaking_always_bump_major = false
features_always_bump_minor = false

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = []
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat|^patch", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix|^bug", group = "<!-- 1 -->🐛 Bug Fixes" },
  # { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^doc", skip = true },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  # { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^refactor", skip = true },
  # { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^style", skip = true },
  # { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^test", skip = true },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  # { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { message = "^chore|^ci", skip = true },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9]+\\."
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
