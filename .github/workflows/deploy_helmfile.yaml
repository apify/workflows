name: deploy helmfile

on:
  workflow_call:
    inputs:
      awsRoleArn:
        description: AWS IAM role ARN
        required: false
        type: string
      useOIDC:
        description: Whether to use OIDC for assume role
        required: false
        type: boolean
        default: false
      githubOIDCRoleArn:
        description: Github OIDC role ARN
        required: false
        type: string
        default: ""
      awsRegion:
        description: AWS region
        required: false
        type: string
        default: us-east-1
      awsSessionDuration:
        description: AWS session duration
        required: false
        type: number
        default: 3600
      revision:
        description: Tag given to container image
        required: true
        type: string
      eksClusterName:
        description: EKS cluster name
        required: true
        type: string
      helmfilePath:
        description: Path to helmfile.yaml
        required: true
        type: string
      helmfileEnvironment:
        description: Helmfile environment
        required: false
        type: string
      helmfileOtherArgs:
        description: Other helmfile parameters
        required: false
        type: string
      envVariables:
        description: Space separated list of environment variables to be set during helmfile apply
        required: false
        type: string
        # example:
        # envVariables: >
        #   FOO=bar
        #   BAR=foo
      slackChannelId:
        description: Slack Channel ID
        required: false
        type: string
      actorOverride:
        description: Override the author of event
        required: false
        type: string
      helmfileCommand:
        description: Command run by helmfile
        required: false
        type: string
        default: apply --suppress-secrets --suppress-diff
      enableVpn:
        description: Enable VPN connection
        required: false
        default: 'true'
        type: string
      runner:
        description: Runner to use
        required: false
        type: string
        default: ubuntu-22.04
      helmfileVersion:
        description: Helmfile version
        required: false
        type: string
        default: v0.171.0
      helmDiffVersion:
        description: Helm diff version
        required: false
        type: string
        default: v3.9.6


    secrets:
      awsAccessKeyId:
        description: AWS access key ID
        required: false
      awsSecretAccessKey:
        description: AWS secret access key
        required: false
      slackToken:
        description: Slack API token
        required: false
      ts_oauth_client_id:
        description: Tailscale OAuth Client ID
        required: false
      ts_oauth_secret:
        description: Tailscale OAuth Client Secret
        required: false


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.awsAccessKeyId }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.awsSecretAccessKey }}
  AWS_REGION: ${{ inputs.awsRegion }}

jobs:
  deploy:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: clone repository
        uses: actions/checkout@v4

      - name: Send notification to slack
        if: inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":large_blue_circle: *${{ github.repository }} deploy of helmfile started*",
              "attachments": [
                {
                  "color": "#0066ff",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.revision }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }

      # There is no public action that would give us the abilities we need. Meaning:
      #   - helmfile
      #   - eksctl
      #   - helm secret plugin
      # NOTE: This will go away with terraform
      - name: setup dependencies
        env:
          # renovate: datasource=github-releases depName=eksctl-io/eksctl
          EKSCTL_VERSION: v0.210.0
          # renovate: datasource=github-releases depName=helmfile/helmfile
          HELMFILE_VERSION: ${{ inputs.helmfileVersion }}
          # renovate: datasource=github-releases depName=databus23/helm-diff
          HELM_DIFF_PLUGIN_VERSION: ${{ inputs.helmDiffVersion }}
        run: |
          HELMFILE_VERSION_WITHOUT_PREFIX=${HELMFILE_VERSION:1}

          # Determine architecture based on runner
          ARCH="amd64"
          if [[ "${{ inputs.runner }}" == *"arm"* ]]; then
            ARCH="arm64"
          fi

          curl -fsSL -o helmfile.tar.gz https://github.com/helmfile/helmfile/releases/download/${{ env.HELMFILE_VERSION }}/helmfile_${HELMFILE_VERSION_WITHOUT_PREFIX}_linux_${ARCH}.tar.gz
          curl -fsSL -o eksctl.tar.gz https://github.com/eksctl-io/eksctl/releases/download/${{ env.EKSCTL_VERSION }}/eksctl_Linux_amd64.tar.gz

          helm plugin install https://github.com/databus23/helm-diff --version ${{ env.HELM_DIFF_PLUGIN_VERSION }}

          mkdir -p $HOME/.local/bin

          tar -C $HOME/.local/bin/ -xf ./eksctl.tar.gz
          tar -C $HOME/.local/bin/ -xf ./helmfile.tar.gz

          chmod +x $HOME/.local/bin/*
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: assume IAM role
        if: inputs.useOIDC == false
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.awsAccessKeyId }}
          aws-secret-access-key: ${{ secrets.awsSecretAccessKey }}
          aws-region: ${{ inputs.awsRegion }}
          role-to-assume: ${{ inputs.awsRoleArn }}
          role-duration-seconds: ${{ inputs.awsSessionDuration }}

          # This parameter is needed otherwise this action is trying to tag session
          # which does not work for cross-account assume
          role-skip-session-tagging: true

      # First assume GithubOIDCRole role, the trust relationship between GitHub and AWS is defined in IAM GithubOIDCRole in the organization account. This role has permissions to assume Deployer roles only.
      - name: assume GithubOIDCRole
        if: inputs.useOIDC == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.awsRegion }}
          role-to-assume: ${{ inputs.githubOIDCRoleArn }}
          role-duration-seconds: ${{ inputs.awsSessionDuration }}

          # This parameter is needed otherwise this action is trying to tag session
          # which does not work for cross-account assume
          role-skip-session-tagging: true

      # Then assume Deployer role, which can be assumed by GithubOIDCRole and has all the permissions needed to deploy cloudformation stacks.
      - name: assume Deployer role
        if: inputs.useOIDC == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.awsRegion }}
          role-to-assume: ${{ inputs.awsRoleArn }}
          role-duration-seconds: ${{ inputs.awsSessionDuration }}
          role-chaining: true
          role-skip-session-tagging: true

      - name: setup kubeconfig
        run: aws eks update-kubeconfig --name ${{ inputs.eksClusterName }} $OPTIONAL_PARAMS

      - name: Tailscale VPN
        uses: tailscale/github-action@v2
        if: inputs.enableVpn == 'true'
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.76.1

      # Bug https://github.com/tailscale/github-action/issues/107
      #- name: Tailscale sleep workaround
      #  run: |
      #    sleep 10

      - name: wait until Tailscale is ready
        if: inputs.enableVpn == 'true'
        run: |
          for i in {1..20}; do
            kubectl cluster-info --request-timeout 3 && break
            echo "Waiting for Tailscale to be ready..."
          done

      - name: helmfile diff
        if: inputs.helmfileCommand != 'destroy'
        run: |
          export $(echo ${{ inputs.envVariables }})
          HELMFILE_PARAMS="-f ${{ inputs.helmfilePath }}"
          [ ! -z ${{ inputs.helmfileEnvironment }} ] && HELMFILE_PARAMS+=" -e ${{ inputs.helmfileEnvironment }}"
          helmfile diff --output dyff $HELMFILE_PARAMS

      - name: helmfile ${{ inputs.helmfileCommand }}
        run: |
          export $(echo ${{ inputs.envVariables }})
          HELMFILE_PARAMS="-f ${{ inputs.helmfilePath }}"
          [ ! -z ${{ inputs.helmfileEnvironment }} ] && HELMFILE_PARAMS+=" -e ${{ inputs.helmfileEnvironment }}"
          [ ! -z ${{ inputs.helmfileOtherArgs }} ] && HELMFILE_PARAMS+=" ${{ inputs.helmfileOtherArgs }}"
          helmfile $HELMFILE_PARAMS ${{ inputs.helmfileCommand }}

      - name: helper - get slack message formatting
        id: helper
        if: always() && inputs.slackChannelId != ''
        run: |
          if [ "${{ job.status }}" = "success" ]
          then
              echo "color=#00cc00" >> $GITHUB_OUTPUT
              echo "emoji=large_green_circle" >> $GITHUB_OUTPUT
          else
              echo "color=#ff0000" >> $GITHUB_OUTPUT
              echo "emoji=red_circle" >> $GITHUB_OUTPUT
          fi

      - name: send result to slack
        if: always() && inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":${{ steps.helper.outputs.emoji }}: *${{ github.repository }} deploy of helmfile result: ${{ job.status }}*",
              "attachments": [
                {
                  "color": "${{ steps.helper.outputs.color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.revision }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
