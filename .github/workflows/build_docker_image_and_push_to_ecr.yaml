name: build docker image and push it to ECR

on:
  workflow_call:
    inputs:
      imageTag:
        description: Tag given to container image
        required: true
        type: string
      repository:
        description: Container repository
        required: true
        type: string
      registry:
        description: Container registry
        required: true
        type: string
      dockerFilePath:
        description: Path to Dockerfile
        required: false
        type: string
        default: ./deploy/Dockerfile
      awsRegion:
        description: AWS region
        required: false
        type: string
        default: us-east-1
      slackChannelId:
        description: Slack Channel ID
        required: false
        type: string
      setNodeVersion:
        description: Put NODE_VERSION from path/to/.nvmrc to docker build args
        required: false
        type: string
        default: true
      nvmrcPath:
        description: Path to nvmrc file
        required: false
        type: string
        default: .nvmrc
      dockerBuildArgs:
        description: Values for --build-arg argument
        required: false
        type: string
        # This is just a dummy default, so docker does not complain
        default: FOO=BAR
      dockerContext:
        description: Relative path to git context
        required: false
        type: string
        default: '.'
      actorOverride:
        description: Override the author of event
        required: false
        type: string

    secrets:
      awsAccessKeyId:
        description: AWS access key ID
        required: true
      awsSecretAccessKey:
        description: AWS secret access key
        required: true
      slackToken:
        description: Slack API token
        required: false
      npmToken:
        description: Put NPM_TOKEN to docker build args
        required: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.awsAccessKeyId }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.awsSecretAccessKey }}
  AWS_REGION: ${{ inputs.awsRegion }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Send notification to slack
        if: inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":large_blue_circle: *${{ github.repository }} build started*",
              "attachments": [
                {
                  "color": "#0066ff",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.imageTag }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }

      - name: clone repository
        uses: actions/checkout@v3
      
      - name: set docker build args and secrets
        run: |
          BUILD_ARGS=${{ inputs.dockerBuildArgs }}
          if [ "${{ inputs.setNodeVersion }}" = true ]; then
              BUILD_ARGS="${BUILD_ARGS}\nNODE_VERSION=$(head -1 ${{ inputs.nvmrcPath }})"
          fi

          echo 'BUILD_ARGS<<EOF' >> $GITHUB_ENV
          echo -e ${BUILD_ARGS} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      # NOTE: can be useful
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      
      - name: setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: login to AWS ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: build and push
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.dockerContext }}
          file: ${{ inputs.dockerFilePath }}
          push: true
          tags: ${{ inputs.registry }}/${{ inputs.repository }}:${{ inputs.imageTag }}
          build-args: |
            ${{ env.BUILD_ARGS }}
            NPM_TOKEN=${{ secrets.npmToken }}

      - name: helper - get slack message attachment color
        id: helper
        if: always() && inputs.slackChannelId != ''
        run: |
          if [ "${{ job.status }}" = "success" ]
          then
              echo "color=#00cc00" >> $GITHUB_OUTPUT
              echo "emoji=large_green_circle" >> $GITHUB_OUTPUT
          else
              echo "color=#ff0000" >> $GITHUB_OUTPUT
              echo "emoji=red_circle" >> $GITHUB_OUTPUT
          fi
      
      - name: send result to slack
        if: always() && inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":${{ steps.helper.outputs.emoji }}: *${{ github.repository }} build result: ${{ job.status }}*",
              "attachments": [
                {
                  "color": "${{ steps.helper.outputs.color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.imageTag }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }