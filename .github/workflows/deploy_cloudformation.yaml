name: deploy cloudformation

on:
  workflow_call:
    inputs:
      awsRoleArn:
        description: AWS IAM role ARN
        required: false
        type: string
      awsRegion:
        description: AWS region
        required: false
        type: string
        default: us-east-1
      awsSessionDuration:
        description: AWS session duration
        required: false
        type: number
        default: 3600
      slackChannelId:
        description: Slack Channel ID
        required: false
        type: string
      actorOverride:
        description: Override the author of event
        required: false
        type: string
      stackName:
        description: Cloudformation stack name
        required: true
        type: string
      templateFile:
        description: Path to cloudformation template file
        required: true
        type: string
      revision:
        description: Revision of change
        required: true
        type: string
      s3Bucket:
        description: S3 bucket where templates will be stored
        required: false
        type: string
      parameters:
        description: Parameters (plaint text or file) for cloudformation template
        required: false
        type: string
      capabilities:
        description: Cloudformation stack capabilities
        required: false
        type: string
      cloudformationRoleArn:
        description: IAM role ARN assumed by Cloudformation service
        required: false
        type: string
      additionalParameters:
        description: Additional parameters of aws cloudformation deploy
        required: false
        type: string
    
    outputs:
      stackOutputs:
        description: Stringified json containing outputs of cloudformation stack
        value: ${{ jobs.deploy.outputs.stackOutputs }}

    secrets:
      awsAccessKeyId:
        description: AWS access key ID
        required: true
      awsSecretAccessKey:
        description: AWS secret access key
        required: true
      slackToken:
        description: Slack API token
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      stackOutputs: ${{ steps.deploy.outputs.stackOutputs }}
    steps:
      - name: send notification to slack
        if: inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":large_blue_circle: *${{ github.repository }} deploy of cloudformation stack ${{ inputs.stackName }} started*",
              "attachments": [
                {
                  "color": "#0066ff",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.revision }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }

      - name: clone repository
        uses: actions/checkout@v3

      - name: assume IAM role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.awsAccessKeyId }}
          aws-secret-access-key: ${{ secrets.awsSecretAccessKey }}
          aws-region: ${{ inputs.awsRegion }}
          role-to-assume: ${{ inputs.awsRoleArn }}
          role-duration-seconds: ${{ inputs.awsSessionDuration }}

          # This parameter is needed otherwise this action is trying to tag session
          # which does not work for cross-account assume
          role-skip-session-tagging: true

      # Since the official cloudformation deploy action is archived for some reason, let's script this!
      - name: deploy
        id: deploy
        run: |
          OUTPUT_TEMPLATE_FILE=${{ inputs.templateFile }}
          if [ "${{ inputs.s3Bucket }}" != "" ]; then
              echo ">>> Checking of bucket exists. If not, will try to create it"
              aws s3 ls | grep ${{ inputs.s3Bucket }} > /dev/null || aws s3 mb s3://${{ inputs.s3Bucket }} > /dev/null
              OUTPUT_TEMPLATE_FILE=$(dirname ${{ inputs.templateFile }})/pkg_$(basename ${{ inputs.templateFile }})
              aws cloudformation package \
                  --template-file ${{ inputs.templateFile }} \
                  --s3-bucket ${{ inputs.s3Bucket }} \
                  --output-template-file ${OUTPUT_TEMPLATE_FILE}
          fi

          OPTIONAL_PARAMETERS=""
          if [ "${{ inputs.parameters }}" != "" ]; then
              OPTIONAL_PARAMETERS="${OPTIONAL_PARAMETERS} --parameter-overrides ${{ inputs.parameters }}"
          fi
          if [ "${{ inputs.capabilities }}" != "" ]; then
              OPTIONAL_PARAMETERS="${OPTIONAL_PARAMETERS} --capabilities ${{ inputs.capabilities }}"
          fi
          if [ "${{ inputs.cloudformationRoleArn }}" ]; then
              OPTIONAL_PARAMETERS="${OPTIONAL_PARAMETERS} --role-arn ${{ inputs.cloudformationRoleArn }}"
          fi
          aws cloudformation deploy \
              --stack-name ${{ inputs.stackName }} \
              --template-file ${OUTPUT_TEMPLATE_FILE} \
              --tags revision=${{ inputs.revision }} \
              ${OPTIONAL_PARAMETERS} \
              ${{ inputs.additionalParameters }}

          # If there are no changes aws cloudformation deploy creates empty changeset, which ends up in FAILED state. Eventually the number of changesets
          # hits cloudformation maximum number of changesets limit, thus cloudformation stack becomes un-updatable. To counter this situation
          # let's try to delete this changeset after deploy. It is challenging to delete the exact changeset, so 1 changeset with the relevant
          # description is selected and deleted. Avoiding to delete all potential changesets as deleting is sequential and could potentially
          # take a long time (=> waste of GH credits, prolong deploy time,...)

          # Using jq, because "--output text" appends "\nNone" to response and that would need to processed.
          CHANGE_SET_NAME=$(
            aws cloudformation list-change-sets \
              --stack-name ${{ inputs.stackName }} \
              --max-items 1 \
              --output json \
              --query "Summaries[?StatusReason=='The submitted information didn\'t contain changes. Submit different information to create a change set.'].ChangeSetName" \
              | jq -r '.[0]')

          if [ "${CHANGE_SET_NAME}" != "null"  ]; then
              echo ">>> Empty changeset found! Name: ${CHANGE_SET_NAME}. Deleting..."
              aws cloudformation delete-change-set \
                  --stack-name ${{ inputs.stackName }} \
                  --change-set-name ${CHANGE_SET_NAME}
          fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
              --stack-name ${{ inputs.stackName }} \
              --output json \
              --query 'Stacks[]' | jq -c '.[] | select(.Outputs != null) | .Outputs | map( { (.OutputKey|tostring): . } ) | add')

          echo "stackOutputs=$STACK_OUTPUTS" >> $GITHUB_OUTPUT

      - name: helper - get slack message formatting
        id: helper
        if: always() && inputs.slackChannelId != ''
        run: |
          if [ "${{ job.status }}" = "success" ]
          then
              echo "color=#00cc00" >> $GITHUB_OUTPUT
              echo "emoji=large_green_circle" >> $GITHUB_OUTPUT
          else
              echo "color=#ff0000" >> $GITHUB_OUTPUT
              echo "emoji=red_circle" >> $GITHUB_OUTPUT
          fi
      
      - name: send result to slack
        if: always() && inputs.slackChannelId != ''
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slackToken }}
        with:
          channel-id: ${{ inputs.slackChannelId }}
          payload: |
            {
              "text": ":${{ steps.helper.outputs.emoji }}: *${{ github.repository }} deploy of cloudformation stack ${{ inputs.stackName }} result: ${{ job.status }}*",
              "attachments": [
                {
                  "color": "${{ steps.helper.outputs.color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ inputs.actorOverride || github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Revision:* ${{ inputs.revision }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Details:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|trigger>, <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:* ${{ github.event_name }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }